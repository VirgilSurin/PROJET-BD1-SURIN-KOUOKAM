* Introduction
Group member : /SURIN Virgil, KOUOKAM Ariane/
This project has for goal to create a library of object and function that allows the user to create and use SPJRUD query on a SQLite database.
* User guide
** Create a SPJRUD request
In order to create your request, SQLObj *and* Operator must be imported.
Each request will works on /relation/. A relation is either a :
- Table object
- Select object
- Projection object
- Rename object
- Join object
- Difference object
- Union object
Of course the base of your request must be built from a /Table/, otherwhise there is no data to manipulate.
You can create a table like this :
#+begin_src python
youTable = Table("dataBaseName", "tableName")
#+end_src
/note : the table and the database must exist/
You can now create custom query with the /Operator/ objects. This guide cover them all.

It is important to note that relation object takes Attr and/or Cst object !
*** Attr
Represent an attributes
#+begin_src python
attr = Attr("attribute_name")
#+end_src
*** Cst
#+begin_src python
cst = Cst("constant_name")
#+end_src

Represent a constant

*** Select
To create a /Select/ query :
#+begin_src python
select = Select(attr, operator, attr_or_cst, relation)
#+end_src
- attr : must ba an Attr
- operator : must be (as a string)
  - =
  - !=
  - >
  - >=
  - <=
  - <
- attr_or_cst : must be an Attr or a Cst
- relation : must be a relation object (see above)
*** Projection
#+begin_src python
proj = Projection([attr1, attr2,...,attrN], relation)
#+end_src
- First argument must be a list of Attr
- relation : must be a relation
*** Rename
#+begin_src python
ren = Rename(attr_to_rename, new_name, relation)
#+end_src
- attr_to_rename : must be an Attr
- new_name : must be a Cst
- relation : must be a relation
*** Union
#+begin_src python
un = Union(rel1, rel2)
#+end_src
This object takes two relation object
*** Join
#+begin_src python
jo = Join(rel1, rel2)
#+end_src
This object takes two relation object
*** Difference
#+begin_src python
diff = Difference(rel1, rel2)
#+end_src
This object takes two relation object
** Execute your request
In order to execute your set of operation, use /.execute_querry/ on your last operation (the one containing all the others). You can print the result.
Here is an example :
#+begin_src python
my_table = Table("myDb", "cool_table_name")
sel = Select(Attr("Team"), "=", Cst("Justic_League"))
proj = Projection([Attr("real_name"), Attr("hero_name")], sel)

print(my_table) 
print("-----My querry result-----")
print(proj.run_querry())
#+end_src
* Personnal choices over implementation
** Operation architecture
We decided to articulate our operation around 2 main classes :
- MonoOperation
- DualOperation
Those two classes or not meant to be used by the user. They are just here to make some common basic verification and initialization for operation.
The difference between those two class are the /kind/ of operation they allow to implement.
MonoOperation is here for SPJRUD operations that only takes one relation as argument, while DualOperation represents SPJRUD operations that are applied exclusively on 2 relation (difference, join, union)

** The query system
The /query system/ is a fancy name. But in reality, it is just a string representing the query of one SPJRUD operation that is carried over to the next operation. This system allow for imbricated operation to happend. At each level, operation will use the query given by the relation in their own query in place of the /table_name/. This leads to a massive single query string containing a sub-query for each sub-operation.
** Attributes
It is easy to get the attributes for a table in a SQLite databes, but it is way harder to get the attributes of the result of a SPJRUD operation as we cannot applied the operation on the actual table. To counter this, the table will fetch its attributes and from operation to operation, it will be carried out and changed to always match the reality of the SPJRUD operation
* Notes
** TestTables.db & SQLTest.py
This project comes with a ready to use database (/TestTables.db/). This database is the one used by M.Buys in his SQL lesson.
SQLTest.py conhtains a single function that allows you, when run, to enter an SQLite query (*not SPJRUD*!) if you want to mess up with the database.
You can freely make some test with the library and mess around to gat your hands on.
** Bugs
There are certainly bugs but, due to time limit, I cannot fix this (or I don't know them). But any issue opened on the repo is welcomed. Maybe I will find the time to fix them in the future  but even If I don't, it may be useful for other (potential) users to know them.
